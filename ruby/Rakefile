# frozen_string_literal: true

require "bundler/gem_tasks"
require "rspec/core/rake_task"
require "standard/rake" unless RUBY_VERSION < "2.6"

require "fileutils"
require "http" unless RUBY_VERSION < "2.5"
require "pry"
require "rubygems/package"

RSpec::Core::RakeTask.new(:spec)

LIB_GITHUB_RELEASES = {
  # This should match the version in the version.rb file
  "0.5.0" => [
    {
      file: "libddprof-aarch64-alpine-linux-musl.tar.gz",
      sha256: "121857f371fed5252654e6eebcb214c6d3a5b089c7e3340e41ab2089df0b9a25",
      ruby_platform: "aarch64-linux-musl"
    },
    {
      file: "libddprof-aarch64-unknown-linux-gnu.tar.gz",
      sha256: "ab4cd1fc9bc3975775bd2ff2122ac0b475533d504965b931d377cca122f7b0b3",
      ruby_platform: "aarch64-linux"
    },
    {
      file: "libddprof-x86_64-alpine-linux-musl.tar.gz",
      sha256: "1675e6402973548ca22da0832babe33d0d4ec739ff9979a600677722fd46ff2f",
      ruby_platform: "x86_64-linux-musl"
    },
    {
      file: "libddprof-x86_64-unknown-linux-gnu.tar.gz",
      sha256: "2db92e2ad87005a043e415fd62079af1f1df3642be9bed3ade840c5533a61063",
      ruby_platform: "x86_64-linux"
    }
  ]
}

task default: [
  :spec,
  (:'standard:fix' unless RUBY_VERSION < "2.6")
].compact

desc "Download lib release from github"
task :fetch do
  Helpers.each_github_release_variant do |file:, sha256:, target_directory:, target_file:, **_|
    target_url = "https://github.com/DataDog/libddprof/releases/download/v#{Libddprof::LIB_VERSION}/#{file}"

    if File.exist?(target_file)
      target_file_hash = Digest::SHA256.hexdigest(File.read(target_file))

      if target_file_hash == sha256
        puts "Found #{target_file} matching the expected sha256, skipping download"
        next
      else
        puts "Found #{target_file} with hash (#{target_file_hash}) BUT IT DID NOT MATCH THE EXPECTED sha256 (#{sha256}), downloading it again..."
      end
    end

    puts "Going to download #{target_url} into #{target_file}"

    File.open(target_file, "wb") do |file|
      HTTP.follow.get(target_url).body.each { |chunk| file.write(chunk) }
    end

    if Digest::SHA256.hexdigest(File.read(target_file)) == sha256
      puts "Success!"
    else
      raise "Downloaded file is corrupt, does not match expected sha256"
    end
  end
end

desc "Extract lib downloaded releases"
task extract: [:fetch] do
  Helpers.each_github_release_variant do |target_directory:, target_file:, **_|
    puts "Extracting #{target_file}"
    File.open(target_file, "rb") do |file|
      Gem::Package.new("").extract_tar_gz(file, target_directory)
    end
  end
end

desc "Package lib downloaded releases as gems"
task package: [
  :spec,
  (:'standard:fix' unless RUBY_VERSION < "2.6"),
  :extract
] do
  gemspec = eval(File.read("libddprof.gemspec"), nil, "libddprof.gemspec") # standard:disable Security/Eval
  FileUtils.mkdir_p("pkg")

  # Fallback package with all binaries
  # This package will get used by (1) platforms that have no matching `ruby_platform` or (2) that have set
  # "BUNDLE_FORCE_RUBY_PLATFORM" (or its equivalent via code) to avoid precompiled gems.
  # In a previous version of libddprof, this package had no binaries, but that could mean that we broke customers in case (2).
  # For customers in case (1), this package is a no-op, and dd-trace-rb will correctly detect and warn that
  # there are no valid binaries for the platform.
  Helpers.package_for(gemspec, ruby_platform: nil, files: Helpers.files_for("x86_64-linux", "x86_64-linux-musl", "aarch64-linux", "aarch64-linux-musl"))

  # We include both glibc and musl variants in the same binary gem to avoid the issues
  # documented in https://github.com/rubygems/rubygems/issues/3174
  Helpers.package_for(gemspec, ruby_platform: "x86_64-linux", files: Helpers.files_for("x86_64-linux", "x86_64-linux-musl"))
  Helpers.package_for(gemspec, ruby_platform: "aarch64-linux", files: Helpers.files_for("aarch64-linux", "aarch64-linux-musl"))

  # Experimental macOS package, not published to rubygems.org at the moment
  if ENV["LIBDDPROF_PACKAGE_MACOS"] == "true"
    Helpers.package_for(gemspec, ruby_platform: "x86_64-darwin-19", files: Helpers.files_for("x86_64-darwin-19"))
  end
end

desc "Release all packaged gems"
task push_to_rubygems: [
  :package,
  :'release:guard_clean'
] do
  system("gem signout") # make sure there are no existing credentials in use

  system("gem push pkg/libddprof-#{Libddprof::VERSION}.gem")
  system("gem push pkg/libddprof-#{Libddprof::VERSION}-x86_64-linux.gem")
  system("gem push pkg/libddprof-#{Libddprof::VERSION}-aarch64-linux.gem")

  system("gem signout") # leave no credentials behind
end

module Helpers
  def self.each_github_release_variant(version: Libddprof::LIB_VERSION)
    LIB_GITHUB_RELEASES.fetch(version).each do |variant|
      file = variant.fetch(:file)
      sha256 = variant.fetch(:sha256)
      ruby_platform = variant.fetch(:ruby_platform)

      # These two are so common that we just centralize them here
      target_directory = "vendor/libddprof-#{version}/#{ruby_platform}"
      target_file = "#{target_directory}/#{file}"

      FileUtils.mkdir_p(target_directory)

      yield(file: file, sha256: sha256, ruby_platform: ruby_platform, target_directory: target_directory, target_file: target_file)
    end
  end

  def self.package_for(gemspec, ruby_platform:, files:)
    target_gemspec = gemspec.dup
    target_gemspec.files += files
    target_gemspec.platform = ruby_platform if ruby_platform

    puts "Building with ruby_platform=#{ruby_platform.inspect} including: (this can take a while)"
    pp target_gemspec.files

    package = Gem::Package.build(target_gemspec)
    FileUtils.mv(package, "pkg")
    puts("-" * 80)
  end

  def self.files_for(
    *included_platforms,
    version: Libddprof::LIB_VERSION,
    excluded_files: [
      "ddprof_ffi.pc", # we use the ddprof_ffi_with_rpath.pc variant
      "libddprof_ffi.a", "ddprof_ffi-static.pc", # We don't use the static library
      "libddprof_ffi.so.debug", # We don't include debug info
      "DDProfConfig.cmake" # We don't compile using cmake
    ]
  )
    files = []

    each_github_release_variant(version: version) do |ruby_platform:, target_directory:, target_file:, **_|
      next unless included_platforms.include?(ruby_platform)

      downloaded_release_tarball = target_file

      files +=
        Dir.glob("#{target_directory}/**/*")
          .select { |path| File.file?(path) }
          .reject { |path| path == downloaded_release_tarball }
          .reject { |path| excluded_files.include?(File.basename(path)) }
    end

    files
  end
end
