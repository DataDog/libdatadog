# frozen_string_literal: true

require "bundler/gem_tasks"
require "rspec/core/rake_task"
require "standard/rake" unless RUBY_VERSION < "2.6"

require "fileutils"
require "http" unless RUBY_VERSION < "2.5"
require "pry"
require "rubygems/package"

RSpec::Core::RakeTask.new(:spec)

LIB_VERSION_TO_PACKAGE = "3.0.0"
unless LIB_VERSION_TO_PACKAGE.start_with?(Libdatadog::LIB_VERSION)
  raise "`LIB_VERSION_TO_PACKAGE` setting in <Rakefile> (#{LIB_VERSION_TO_PACKAGE}) does not match " \
    "`LIB_VERSION` setting in <lib/libdatadog/version.rb> (#{Libdatadog::LIB_VERSION})"
end

LIB_GITHUB_RELEASES = [
  {
    file: "libdatadog-aarch64-alpine-linux-musl.tar.gz",
    sha256: "d9774bd28600fdc7c931146637d6410884d67a5e443486f1d2bfa320c4f00cb0",
    ruby_platform: "aarch64-linux-musl"
  },
  {
    file: "libdatadog-aarch64-unknown-linux-gnu.tar.gz",
    sha256: "71b89626f585ebf385482fb9d000c71f91721b395df8d352ce04a825c1f1776a",
    ruby_platform: "aarch64-linux"
  },
  {
    file: "libdatadog-x86_64-alpine-linux-musl.tar.gz",
    sha256: "3fba3b542cbdd44bfb9fde09c5a65aabb34a92e56904dc6c6f3f53a0beb8ccef",
    ruby_platform: "x86_64-linux-musl"
  },
  {
    file: "libdatadog-x86_64-unknown-linux-gnu.tar.gz",
    sha256: "39418275058a5ba96d6284bb6add0e9fbf6a59d7de0755d10184a0223f21c3ed",
    ruby_platform: "x86_64-linux"
  }
]

task default: [
  :spec,
  (:"standard:fix" unless RUBY_VERSION < "2.6")
].compact

desc "Download lib release from github"
task :fetch do
  Helpers.each_github_release_variant do |file:, sha256:, target_directory:, target_file:, **_|
    target_url = "https://github.com/datadog/libdatadog/releases/download/v#{LIB_VERSION_TO_PACKAGE}/#{file}"

    if File.exist?(target_file)
      target_file_hash = Digest::SHA256.hexdigest(File.read(target_file))

      if target_file_hash == sha256
        puts "Found #{target_file} matching the expected sha256, skipping download"
        next
      else
        puts "Found #{target_file} with hash (#{target_file_hash}) BUT IT DID NOT MATCH THE EXPECTED sha256 (#{sha256}), downloading it again..."
      end
    end

    puts "Going to download #{target_url} into #{target_file}"

    File.open(target_file, "wb") do |file|
      HTTP.follow.get(target_url).body.each { |chunk| file.write(chunk) }
    end

    if Digest::SHA256.hexdigest(File.read(target_file)) == sha256
      puts "Success!"
    else
      raise "Downloaded file is corrupt, does not match expected sha256"
    end
  end
end

desc "Extract lib downloaded releases"
task extract: [:fetch] do
  Helpers.each_github_release_variant do |target_directory:, target_file:, **_|
    puts "Extracting #{target_file}"
    File.open(target_file, "rb") do |file|
      Gem::Package.new("").extract_tar_gz(file, target_directory)
    end
  end
end

desc "Package lib downloaded releases as gems"
task package: [
  :spec,
  (:"standard:fix" unless RUBY_VERSION < "2.6"),
  :extract
] do
  gemspec = eval(File.read("libdatadog.gemspec"), nil, "libdatadog.gemspec") # standard:disable Security/Eval
  FileUtils.mkdir_p("pkg")

  # Fallback package with all binaries
  # This package will get used by (1) platforms that have no matching `ruby_platform` or (2) that have set
  # "BUNDLE_FORCE_RUBY_PLATFORM" (or its equivalent via code) to avoid precompiled gems.
  # In a previous version of libdatadog, this package had no binaries, but that could mean that we broke customers in case (2).
  # For customers in case (1), this package is a no-op, and dd-trace-rb will correctly detect and warn that
  # there are no valid binaries for the platform.
  Helpers.package_for(gemspec, ruby_platform: nil, files: Helpers.files_for("x86_64-linux", "x86_64-linux-musl", "aarch64-linux", "aarch64-linux-musl"))

  # We include both glibc and musl variants in the same binary gem to avoid the issues
  # documented in https://github.com/rubygems/rubygems/issues/3174
  Helpers.package_for(gemspec, ruby_platform: "x86_64-linux", files: Helpers.files_for("x86_64-linux", "x86_64-linux-musl"))
  Helpers.package_for(gemspec, ruby_platform: "aarch64-linux", files: Helpers.files_for("aarch64-linux", "aarch64-linux-musl"))

  # Experimental macOS package, not published to rubygems.org at the moment
  if ENV["LIBDATADOG_PACKAGE_MACOS"] == "true"
    Helpers.package_for(gemspec, ruby_platform: "x86_64-darwin-19", files: Helpers.files_for("x86_64-darwin-19"))
  end
end

desc "Release all packaged gems"
task push_to_rubygems: [
  :package,
  :"release:guard_clean"
] do
  puts "Please input 'libdatadog ruby release key' from 'Shared-Profiling' Datadog 1Password:"
  input = $stdin.gets.strip

  ENV["GEM_HOST_API_KEY"] = input

  system("gem push pkg/libdatadog-#{Libdatadog::VERSION}.gem")
  system("gem push pkg/libdatadog-#{Libdatadog::VERSION}-x86_64-linux.gem")
  system("gem push pkg/libdatadog-#{Libdatadog::VERSION}-aarch64-linux.gem")
end

module Helpers
  def self.each_github_release_variant
    LIB_GITHUB_RELEASES.each do |variant|
      file = variant.fetch(:file)
      sha256 = variant.fetch(:sha256)
      ruby_platform = variant.fetch(:ruby_platform)

      # These two are so common that we just centralize them here
      target_directory = "vendor/libdatadog-#{Libdatadog::LIB_VERSION}/#{ruby_platform}"
      target_file = "#{target_directory}/#{file}"

      FileUtils.mkdir_p(target_directory)

      yield(file: file, sha256: sha256, ruby_platform: ruby_platform, target_directory: target_directory, target_file: target_file)
    end
  end

  def self.package_for(gemspec, ruby_platform:, files:)
    target_gemspec = gemspec.dup
    target_gemspec.files += files
    target_gemspec.platform = ruby_platform if ruby_platform

    puts "Building with ruby_platform=#{ruby_platform.inspect} including: (this can take a while)"
    pp target_gemspec.files

    package = Gem::Package.build(target_gemspec)
    FileUtils.mv(package, "pkg")
    puts("-" * 80)
  end

  def self.files_for(
    *included_platforms,
    excluded_files: [
      "datadog_profiling.pc", # we use the datadog_profiling_with_rpath.pc variant
      "libdatadog_profiling.a", "datadog_profiling-static.pc", # We don't use the static library
      "libdatadog_profiling.so.debug", # We don't include debug info
      "DatadogConfig.cmake" # We don't compile using cmake
    ]
  )
    files = []

    each_github_release_variant do |ruby_platform:, target_directory:, target_file:, **_|
      next unless included_platforms.include?(ruby_platform)

      downloaded_release_tarball = target_file

      files +=
        Dir.glob("#{target_directory}/**/*")
          .select { |path| File.file?(path) }
          .reject { |path| path == downloaded_release_tarball }
          .reject { |path| excluded_files.include?(File.basename(path)) }
    end

    files
  end
end
