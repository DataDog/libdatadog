name: NewTest
on: [push]
env: 
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.71.1

jobs:
  test:
    name: "[${{ matrix.platform }}:${{ matrix.rust_version }}] cargo test --workspace"
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest]
        rust_version: [""]
      fail-fast: false
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Cache
        uses: ./.github/actions/cache
        with:
          rust_version: ${{ matrix.rust_version }}
      - name: Install Rust ${{ matrix.rust_version }}
        if: ${{ matrix.rust_version != '' }}
        run: rustup install ${{ matrix.rust_version }} && rustup default ${{ matrix.rust_version }}
      - id: rust-version
        # On Windows run happens in a PowerShell, so start bash explicitly
        run: bash -c 'VER=$(rustc --version); SVER=$(echo "$VER" | cut -d " " -f 2); echo "version=$VER" >> $GITHUB_OUTPUT; echo "short-version=$SVER" >> $GITHUB_OUTPUT'
      - name: Install cargo nextest
        uses: taiki-e/install-action@v2.32.20
        with: 
          tool: nextest@0.9.68
      - name: Free Disk Space (Ubuntu only)
        if: runner.os == 'Linux' && matrix.platform == 'ubuntu-latest'
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: "remove nextest ci directory"
        shell: bash
        run: rm -rf target/nextest/ci
      - name: "[${{ steps.rust-version.outputs.version }}] cargo build --workspace --verbose"
        run: cargo build --workspace --verbose
      - name: "[${{ steps.rust-version.outputs.version }} WIN] cargo nextest run --profile ci --verbose"
        if: ${{ matrix.platform == 'windows-latest' }}
        run: cargo nextest run --profile ci --verbose
        env:
          RUST_BACKTRACE: 1
          # TODO do we need to create multiple junit files for the different test runs?
      - name: "[${{ steps.rust-version.outputs.version }} UBU] cargo nextest run --profile ci --verbose"
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: cargo nextest run --profile ci --verbose
        env:
          RUST_BACKTRACE: 1
          # TODO do we need to create multiple junit files for the different test runs
      - name: Report Test Results
        if: success() || failure() 
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "target/nextest/ci/*.xml"
          #check_name: "[${{ matrix.platform }}:${{ matrix.rust_version }}] test report"

      # - name: "Save Test Results"
      #   if: success() || failure() # always upload test results unless canceled
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-results-${{ matrix.platform }}-${{ steps.rust-version.outputs.short-version }}
      #     path: target/nextest/ci*/*.xml

  # publish-test-results:
  #     name: "Publish Tests Results"
  #     needs: test
  #     runs-on: ubuntu-latest
  #     permissions:
  #       checks: write
  #       pull-requests: write
  #     if: success() || failure() 
  #     steps:
  #       - name: Download Artifacts
  #         uses: actions/download-artifact@v4
  #         with:
  #           path: artifacts
  #       - name: List Artifacts
  #         run: ls -laR artifacts
  #       - name: Report Test Results
  #         uses: mikepenz/action-junit-report@v4
  #         with:
  #           report_paths: "artifacts/**/*.xml"
  #           check_name: "Report Test Results"
