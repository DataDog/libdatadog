ARG ALPINE_BASE_IMAGE="alpine:3.22.0"
ARG CARGO_BUILD_INCREMENTAL="true"
ARG CARGO_NET_RETRY="2"
ARG BUILDER_IMAGE=debian_builder

### Debian builder
FROM rust:1-slim-buster AS debian_builder
ENV CARGO_HOME="/root/.cargo"
WORKDIR /build
RUN cargo install cbindgen && mv /root/.cargo/bin/cbindgen /usr/bin/ && rm -rf /root/.cargo

### Debian buildplatform builder
FROM --platform=$BUILDPLATFORM rust:1-slim-buster AS debian_builder_platform_native
ENV CARGO_HOME="/root/.cargo"
WORKDIR /build

### Alpine builder
FROM ${ALPINE_BASE_IMAGE} AS alpine_base
ENV CARGO_HOME="/root/.cargo"
WORKDIR /build

RUN apk update \
    && apk add --no-cache \
    build-base \
    cargo \
    cmake \
    curl \
    git \
    make \
    patchelf \
    protoc \
    pkgconf \
    unzip \
    bash \
    clang16-libclang \
    && mkdir /usr/local/src

# Tell docker to use bash as the default
SHELL ["/bin/bash", "-c"]

# Don't use rustup! For some reason it provides different native-static-libs
# and this can cause problems for users.
# Also, it doesn't understand x86_64-alpine-linux-musl like the OS's cargo.
#RUN rustup-init -y --no-modify-path --default-toolchain stable

FROM alpine_base AS alpine_aws_cli
RUN apk add --no-cache aws-cli \
    && rm -rf /var/cache/apk/*

RUN aws --version   # Just to make sure its installed alright

FROM alpine_base AS alpine_cbindgen
ENV PATH="/root/.cargo/bin:$PATH"
ARG CARGO_BUILD_INCREMENTAL
ARG CARGO_NET_RETRY
ENV CARGO_NET_RETRY="${CARGO_NET_RETRY}"
RUN cargo install cbindgen --version "^0.26" && cargo install bindgen-cli --locked && rm -rf /root/.cargo/registry /root/.cargo/git

FROM alpine_aws_cli AS alpine_builder
COPY --from=alpine_cbindgen /root/.cargo/bin/cbindgen /usr/local/bin/cbindgen
COPY --from=alpine_cbindgen /root/.cargo/bin/bindgen /usr/local/bin/bindgen


### Cache cargo metadata between builds
FROM debian_builder_platform_native AS ffi_build_platform_agnostic_cache_build
# update cache cargo.io metadata
RUN cargo search nothing --limit 1

# create stubs to cache compilation of dependendencies
COPY [ "Cargo.lock", "Cargo.toml", "./"]
COPY "libdd-alloc/Cargo.toml" "libdd-alloc/"
COPY "build-common/Cargo.toml" "build-common/"
COPY "libdd-crashtracker/Cargo.toml" "libdd-crashtracker/"
COPY "libdd-crashtracker-ffi/Cargo.toml" "libdd-crashtracker-ffi/"
COPY "libdd-common/Cargo.toml" "libdd-common/"
COPY "libdd-common-ffi/Cargo.toml" "libdd-common-ffi/"
COPY "libdd-telemetry/Cargo.toml" "libdd-telemetry/"
COPY "libdd-telemetry-ffi/Cargo.toml" "libdd-telemetry-ffi/"
COPY "libdd-log/Cargo.toml" "libdd-log/"
COPY "libdd-log-ffi/Cargo.toml" "libdd-log-ffi/"
COPY "libdd-sketch/Cargo.toml" "libdd-sketch/"
COPY "libdd-sketch-ffi/Cargo.toml" "libdd-sketch-ffi/"
COPY "libdd-dogstatsd-client/Cargo.toml" "libdd-dogstatsd-client/"
COPY "libdd-library-config-ffi/Cargo.toml" "libdd-library-config-ffi/"
COPY "libdd-library-config/Cargo.toml" "libdd-library-config/"
COPY "libdd-live-debugger/Cargo.toml" "libdd-live-debugger/"
COPY "libdd-live-debugger-ffi/Cargo.toml" "libdd-live-debugger-ffi/"
COPY "libdd-profiling/Cargo.toml" "libdd-profiling/"
COPY "libdd-profiling-ffi/Cargo.toml" "libdd-profiling-ffi/"
COPY "libdd-profiling-protobuf/Cargo.toml" "libdd-profiling-protobuf/"
COPY "libdd-profiling-replayer/Cargo.toml" "libdd-profiling-replayer/"
COPY "libdd-remote-config/Cargo.toml" "libdd-remote-config/"
COPY "datadog-sidecar/Cargo.toml" "datadog-sidecar/"
COPY "datadog-sidecar-macros/Cargo.toml" "datadog-sidecar-macros/"
COPY "datadog-sidecar-ffi/Cargo.toml" "datadog-sidecar-ffi/"
COPY "symbolizer-ffi/Cargo.toml" "symbolizer-ffi/"
COPY "libdd-trace-normalization/Cargo.toml" "libdd-trace-normalization/"
COPY "libdd-trace-obfuscation/Cargo.toml" "libdd-trace-obfuscation/"
COPY "libdd-trace-protobuf/Cargo.toml" "libdd-trace-protobuf/"
COPY "libdd-trace-utils/Cargo.toml" "libdd-trace-utils/"
COPY "libdd-trace-stats/Cargo.toml" "libdd-trace-stats/"
COPY "libdd-tracer-flare/Cargo.toml" "libdd-tracer-flare/"
COPY "tools/Cargo.toml" "tools/"
COPY "tools/cc_utils/Cargo.toml" "tools/cc_utils/"
COPY "tools/sidecar_mockgen/Cargo.toml" "tools/sidecar_mockgen/"
COPY "spawn_worker/Cargo.toml" "spawn_worker/"
COPY "tests/spawn_from_lib/Cargo.toml" "tests/spawn_from_lib/"
COPY "libdd-ipc/Cargo.toml" "libdd-ipc/"
COPY "libdd-ipc-macros/Cargo.toml" "libdd-ipc-macros/"
COPY "libdd-ipc/tarpc/Cargo.toml" "libdd-ipc/tarpc/"
COPY "libdd-ipc/plugins/Cargo.toml" "libdd-ipc/plugins/"
COPY "libdd-data-pipeline/Cargo.toml" "libdd-data-pipeline/"
COPY "libdd-data-pipeline-ffi/Cargo.toml" "libdd-data-pipeline-ffi/"
COPY "bin_tests/Cargo.toml"  "bin_tests/"
COPY "libdd-tinybytes/Cargo.toml" "libdd-tinybytes/"
COPY "builder/Cargo.toml"  "builder/"
COPY "libdd-ffe/Cargo.toml" "libdd-ffe/"
RUN find -name "Cargo.toml" | sed -e s#Cargo.toml#src/lib.rs#g | xargs -n 1 sh -c 'mkdir -p $(dirname $1); touch $1; echo $1' create_stubs
RUN echo \
    bin_tests/src/bin/crashtracker_bin_test.rs \
    bin_tests/src/bin/crashtracker_receiver.rs \
    bin_tests/src/bin/crashing_test_app.rs \
    bin_tests/src/bin/crashtracker_unix_socket_receiver.rs \
    bin_tests/src/bin/test_the_tests.rs \
    builder/src/bin/release.rs \
    libdd-telemetry/examples/tm-worker-test.rs \
    libdd-ipc/benches/ipc.rs \
    libdd-ipc/tarpc/examples/compression.rs \
    libdd-ipc/tarpc/examples/custom_transport.rs \
    libdd-ipc/tarpc/examples/pubsub.rs \
    libdd-ipc/tarpc/examples/readme.rs \
    libdd-ipc/tarpc/examples/tracing.rs \
    libdd-ipc/tarpc/tests/compile_fail.rs \
    libdd-ipc/tarpc/tests/dataservice.rs \
    libdd-ipc/tarpc/tests/service_functional.rs \
    libdd-profiling-replayer/src/main.rs \
    libdd-profiling/benches/interning_strings.rs \
    libdd-profiling/benches/main.rs \
    tools/sidecar_mockgen/src/bin/sidecar_mockgen.rs \
    tools/src/bin/dedup_headers.rs \
    libdd-trace-normalization/benches/normalization_utils.rs \
    libdd-trace-obfuscation/benches/trace_obfuscation.rs \
    libdd-trace-utils/benches/deserialization.rs \
    libdd-trace-utils/benches/main.rs \
    | xargs -n 1 sh -c 'mkdir -p $(dirname $1); touch $1; echo $1' create_stubs

# cache dependencies
RUN cargo fetch --locked

# extract cargo cache
FROM --platform=$BUILDPLATFORM scratch AS ffi_build_platform_agnostic_cache
COPY --from=ffi_build_platform_agnostic_cache_build /root/.cargo /root/.cargo
COPY --from=ffi_build_platform_agnostic_cache_build /build /build

### FFI builder
FROM ${BUILDER_IMAGE} AS ffi_build
COPY --from=ffi_build_platform_agnostic_cache /root/.cargo /root/.cargo/
COPY --from=ffi_build_platform_agnostic_cache /build /build
WORKDIR /build
# cache debug dependency build
RUN cargo build --lib --workspace --exclude builder
# cache release dependency build
RUN cargo build --release --lib --workspace --exclude builder

COPY ./ ./
RUN cargo run --bin release --features profiling,telemetry,data-pipeline,symbolizer,crashtracker,datadog-library-config-ffi,ddsketch --release -- --out /build/output

FROM scratch AS ffi_build_output

COPY --from=ffi_build /build/output/ ./
