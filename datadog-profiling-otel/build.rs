// Copyright 2025-Present Datadog, Inc. https://www.datadoghq.com/
// SPDX-License-Identifier: Apache-2.0

use std::env;
use std::path::PathBuf;

fn main() {
    // Tell Cargo to rerun this build script if the proto files change
    println!("cargo:rerun-if-changed=profiles.proto");
    println!("cargo:rerun-if-changed=opentelemetry/proto/common/v1/common.proto");
    println!("cargo:rerun-if-changed=opentelemetry/proto/resource/v1/resource.proto");

    // Create the output directory
    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());

    // Configure prost-build
    let mut config = prost_build::Config::new();
    config.out_dir(&out_dir);

    // Compile the proto files - include all proto files so imports work correctly
    config
        .compile_protos(
            &[
                "opentelemetry/proto/common/v1/common.proto",
                "opentelemetry/proto/resource/v1/resource.proto",
                "profiles.proto",
            ],
            &["."],
        )
        .expect("Failed to compile protobuf files");

    // Generate the module file with correct structure
    let module_content = r#"
// Copyright 2025-Present Datadog, Inc. https://www.datadoghq.com/
// SPDX-License-Identifier: Apache-2.0

// This module is generated by prost-build from profiles.proto
#[allow(clippy::all)]
pub mod opentelemetry {
    pub mod proto {
        pub mod common {
            pub mod v1 {
                include!(concat!(env!("OUT_DIR"), "/opentelemetry.proto.common.v1.rs"));
            }
        }
        pub mod resource {
            pub mod v1 {
                include!(concat!(env!("OUT_DIR"), "/opentelemetry.proto.resource.v1.rs"));
            }
        }
        pub mod profiles {
            pub mod v1development {
                include!(concat!(env!("OUT_DIR"), "/opentelemetry.proto.profiles.v1development.rs"));
            }
        }
    }
}

// Re-export commonly used types
pub use opentelemetry::proto::profiles::v1development::*;
pub use opentelemetry::proto::common::v1::*;
pub use opentelemetry::proto::resource::v1::*;
"#;

    std::fs::write(out_dir.join("mod.rs"), module_content).expect("Failed to write module file");
}
