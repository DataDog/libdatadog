[package]
edition = "2021"
license = "Apache 2.0"
name = "datadog-sidecar"
version = "0.0.1"

[lib]
bench = false

[features]
default = ["tracing"]
tracing = ["tracing/std", "tracing-log", "tracing-subscriber"]
tokio-console = ["tokio/full", "tokio/tracing", "console-subscriber"]

[dependencies]
anyhow = { version = "1.0" }
arrayref = "0.3.7"
priority-queue = "2.1.1"
ddcommon = { path = "../ddcommon" }
datadog-sidecar-macros = { path = "macros" }

ddtelemetry = { path = "../ddtelemetry", features = ["tracing"] }
data-pipeline = { path = "../data-pipeline" }
datadog-trace-utils = { path = "../trace-utils" }
datadog-remote-config = { path = "../remote-config" }
datadog-live-debugger = { path = "../live-debugger" }
datadog-crashtracker = { path = "../crates/datadog-crashtracker" }
dogstatsd-client = { path = "../dogstatsd-client" }
tinybytes = { path = "../tinybytes" }

futures = { version = "0.3", default-features = false }
manual_future = "0.1.1"
http = "1.0"
hyper = { version = "1.6", features = ["http1", "client"] }
http-body-util = "0.1"

datadog-ipc = { path = "../ipc", features = ["tiny-bytes"] }
datadog-ipc-macros = { path = "../ipc/macros" }

rand = "0.8.3"
serde = { version = "1.0", features = ["derive", "rc"] }
serde_with = "3.6.0"
bincode = { version = "1.3.3" }
serde_json = "1.0"
base64 = "0.22.1"
spawn_worker = { path = "../spawn_worker" }
zwohash = "0.1.2"
sha2 = "0.10"
tokio = { version = "1.35.1", features = [
    "fs",
    "sync",
    "io-util",
    "signal",
    "rt-multi-thread",
] }
tokio-util = { version = "0.7", features = ["codec"] }

prctl = "1.0.0"
tracing = { version = "0.1", default-features = false }
tracing-log = { version = "0.2.0", optional = true }
tracing-subscriber = { version = "0.3", default-features = false, features = [
    "std",
    "fmt",
    "env-filter",
], optional = true }
chrono = "0.4.31"
console-subscriber = { version = "0.4", optional = true }
libc = { version = "0.2" }

# watchdog and self telemetry
memory-stats = { version = "1.2.0", features = ["always_use_statm"] }

[dependencies.windows]
features = [
    "Win32_Foundation",
    "Wdk_Storage_FileSystem",
    "Win32_System_IO",
    "Win32_System_WindowsProgramming",
]
version = "0.51.0"

# simd-json v0.15 uses Rust 2024 Edition, so it needs Rust 1.85+.
[target.'cfg(not(target_arch = "x86"))'.dependencies]
simd-json = "=0.14"

[target.'cfg(unix)'.dependencies]
nix = { version = "0.29", features = ["socket", "mman"] }
sendfd = { version = "0.4", features = ["tokio"] }

[target.'cfg(windows)'.dependencies]
ddcommon-ffi = { path = "../ddcommon-ffi", default-features = false }
datadog-crashtracker-ffi = { path = "../crates/datadog-crashtracker-ffi", default-features = false, features = ["collector", "collector_windows"] }
winapi = { version = "0.3.9", features = ["securitybaseapi", "sddl"] }
windows-sys = { version = "0.52.0", features = ["Win32_System_SystemInformation"] }

[target.'cfg(windows_seh_wrapper)'.dependencies]
microseh = "0.1.1"

[dev-dependencies]
libc = { version = "0.2" }
tempfile = { version = "3.3" }
httpmock = "0.7.0"
datadog-remote-config = { path = "../remote-config", features = ["test"] }
datadog-trace-utils = { path = "../trace-utils", features = ["test-utils"] }
datadog-dynamic-configuration = { path = "../dynamic-configuration", features = ["test"] }

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(tokio_taskdump,windows_seh_wrapper)',
    'cfg(feature, values("logging"))',
] }
