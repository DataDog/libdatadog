// Copyright 2023-Present Datadog, Inc. https://www.datadoghq.com/
// SPDX-License-Identifier: Apache-2.0

use super::*;

/// Represents a [pprof::Mapping] with some space-saving changes:
///  - The id is not stored on the struct. It's stored in the container that holds the struct.
///  - ids for linked objects use 32-bit numbers instead of 64 bit ones.
#[derive(Eq, PartialEq, Hash)]
pub struct Mapping {
    /// Address at which the binary (or DLL) is loaded into memory.
    pub memory_start: u64,
    /// The limit of the address range occupied by this mapping.
    pub memory_limit: u64,
    /// Offset in the binary that corresponds to the first mapped address.
    pub file_offset: u64,

    /// The object this entry is loaded from.  This can be a filename on
    /// disk for the main binary and shared libraries, or virtual
    /// abstractions like "[vdso]".
    pub filename: StringId,

    /// A string that uniquely identifies a particular program version
    /// with high probability. E.g., for binaries generated by GNU tools,
    /// it could be the contents of the .note.gnu.build-id field.
    pub build_id: StringId,
}

impl Item for Mapping {
    type Id = MappingId;
}

impl PprofItem for Mapping {
    type PprofMessage = pprof::Mapping;

    fn to_pprof(&self, id: Self::Id) -> Self::PprofMessage {
        pprof::Mapping {
            id: id.to_raw_id(),
            memory_start: self.memory_start,
            memory_limit: self.memory_limit,
            file_offset: self.file_offset,
            filename: self.filename.to_raw_id(),
            build_id: self.build_id.to_raw_id(),
            ..pprof::Mapping::default() // todo: support detailed Mapping info
        }
    }
}

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, PartialOrd, Ord)]
#[repr(transparent)]
pub struct MappingId(pub(crate) NonZeroU32);

impl Id for MappingId {
    type RawId = u64;

    fn from_offset(offset: usize) -> Self {
        #[allow(clippy::expect_used)]
        Self(small_non_zero_pprof_id(offset).expect("MappingId to fit into a u32"))
    }

    fn to_raw_id(&self) -> Self::RawId {
        self.0.get().into()
    }
}
